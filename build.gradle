buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
} /*쿼리 dsl 추가 설정 : 교재 p448?*/

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.7'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.mbc'
version = '0.0.1-SNAPSHOT' /*빌드했을때 jar 파일명*/

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    /*메이븐 리포지토리에서 코드를 가져와 코끼리를 누르면 가져온다.*/

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'     /*프론트 관련*/
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'     /*프론트 layout 관련*/

    implementation 'org.springframework.boot:spring-boot-starter-web'           /*string-web*/

    compileOnly 'org.projectlombok:lombok'                                      /*lombok*/
    annotationProcessor 'org.projectlombok:lombok'                              /*lombok*/
    testCompileOnly 'org.projectlombok:lombok'                                  /*lombok*/
    testAnnotationProcessor 'org.projectlombok:lombok'                          /*lombok*/

    /*p460 DTO 와 Entity 간의 변환용 : modelmapper*/
    /*과거에는 Entity -> DTO 로 변환 또는 DTO -> Entity 로 변환해서 써야했었는데 요즘에는 아래와같이 변환 가능하도록 나옴 */
    /*프로젝트에 config 라는 환경설정용 패키지를 만들고 RootConfig 라는 클래스를 만들어서 사용하면 된다.*/
    implementation 'org.modelmapper:modelmapper:3.1.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'             /*boot 개발용*/

    /*1,2단계 설정 -> src/main/resources/application.properties 에서 설정함*/
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'                          /*마리아 db 드라이버*/
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'      /*데이터 베이스 관련*/

    testImplementation 'org.springframework.boot:spring-boot-starter-test'      /*테스트 junit 메서드 단위 테스트*/
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'                /*junit용 코드*/

    /*쿼리 dsl 문구 추가 p448*/
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"

    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")
}

tasks.named('test') {
    useJUnitPlatform()
}

/*쿼리 dsl 문구 추가 p448*/
sourceSets {

    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}
/*쿼리 dsl 사용법 -> 오른쪽에 있는 Gradle 메뉴를 열고 other 를 찾아서 compilejava 실행*/
/* 하단에 compile 가 된다. -> 왼쪽 탐색기 -> build- > generated -> main -> domain ->
q 로 시작하는 클래스를 만든거임 쿼리 dsl 용 객체로 우리가 커스텀 하면 안됨!!
*********주의 사항 : 엔티티나 dto 를 건들면 q 도메인을 다시 생성해야한다.*********
삭제 방법 -> 오른쪽 Gradle 메뉴 -> Tasks -> build -> clean 후 다시 생성하면 됨.*/

compileJava.dependsOn('clean')