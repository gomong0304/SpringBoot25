## \uD1B0\uCEA3 \uAD00\uB828 \uC124\uC815 \uBC0F \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uAD00\uB828 \uC124\uC815\uD55C\uB2E4
spring.application.name=board

## http://192.168.111.105:80
server.port=80

## \uB85C\uADF8 \uB808\uBCA8 \uC870\uC815 -> log4j2.xml\uB85C \uB300\uCCB4\uD568. (\uAD50\uC7AC 142\uCABD)
logging.level.org.springframework=info
logging.level.org.mbc=debug


## \uB370\uC774\uD130 \uBCA0\uC774\uC2A4(\uD558\uC774\uB514) \uAD00\uB828 1,2\uB2E8\uACC4 \uC124\uC815
#/* \uAD6C\uBD84\uC790\uB97C ";" \uC73C(\uB85C) \uBCC0\uACBD*/
#/* 127.0.0.1 \uC5D0 MariaDB or MySQL (TCP/IP) \uC744(\uB97C) \uD1B5\uD574 \uC5F0\uACB0 \uC911, \uC0AC\uC6A9\uC790 \uC774\uB984 "root", \uC554\uD638\uC0AC\uC6A9: Yes.. */
#SELECT CONNECTION_ID();
#/* \uBB38\uC790 \uC9D1\uD569: utf8mb4 */
#SHOW /*!50002 GLOBAL */ STATUS;
#SELECT NOW();
#SHOW VARIABLES;
#/* \uC5F0\uACB0\uB428. \uC2A4\uB808\uB4DC-ID: 3 */
#SHOW TABLES FROM `information_schema`;
#SHOW DATABASES;
#/* "root" \uC138\uC158 \uC2DC\uC791 */
#SHOW COLLATION;
#CREATE DATABASE `bootex` /*!40100 COLLATE 'utf8_general_ci' */;
#SHOW DATABASES;
#/* "root" \uC138\uC158 \uC2DC\uC791 */
#FLUSH PRIVILEGES;
#SHOW COLUMNS FROM `mysql`.`user`;
#SELECT `user`, `host`, IF(LENGTH(password)>0, password, authentication_string) AS `password` FROM `mysql`.`user`;
#CREATE USER 'bootuser'@'%' IDENTIFIED BY 'bootuser';
#GRANT USAGE ON *.* TO 'bootuser'@'%';
#GRANT EXECUTE, SELECT, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON `bootex`.* TO 'bootuser'@'%' WITH GRANT OPTION;
#FLUSH PRIVILEGES;
#SHOW GRANTS FOR 'bootuser'@'%';

## \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uAD00\uB828 1,2\uB2E8\uAC8C \uC124\uC815
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/bootex
spring.datasource.username=bootuser
spring.datasource.password=bootuser

##jpa \uAD00\uB828 \uC124\uC815 \uCD94\uAC00(jpa : orm \uC5D0\uC11C \uC2DC\uC791\uB418\uC5C8\uB2E4.) \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uB3C4 \uAC1D\uCCB4\uD615\uC73C\uB85C \uBCF4\uC790

## @Entity\uC640 \uAD00\uB828\uB41C \uCF54\uB4DC
spring.jpa.hibernate.ddl-auto=update
##update : \uAE30\uC874\uACFC \uB2E4\uB978 \uD14C\uC774\uBE14\uC774 \uBCC0\uACBD\uB418\uBA74 drop \uD6C4 create \uD55C\uB2E4.
##none : \uD14C\uC774\uBE14 \uAD6C\uC870\uB97C \uBCC0\uACBD\uD558\uC9C0 \uC54A\uB294\uB2E4.
##create : \uC2E4\uD589\uD560 \uB54C\uB9C8\uB2E4 \uD14C\uC774\uBE14\uC744 \uC0C8\uB85C \uB9CC\uB4E0\uB2E4.
##create-drop : \uC2E4\uD589\uD560 \uB54C \uD14C\uC774\uBE14\uC744 \uC0C8\uB85C \uB9CC\uB4E4\uACE0 \uC885\uB8CC\uD560 \uB54C drop
##validate : \uBCC0\uACBD\uB41C \uBD80\uBD84\uB9CC \uCF58\uC194\uB9CC \uC54C\uB824\uC90C(\uAD6C\uC870 \uBCC0\uACBD \uC548 \uD568)

spring.jpa.properties.hibernate.format_sql=true
## \uCF58\uC194\uC5D0 sql \uCFFC\uB9AC\uBB38\uC744 \uBCF4\uC5EC\uC90C

spring.jpa.show-sql=true
## jpa\uAC00 \uD558\uB294 \uC77C\uC744 \uBCF4\uC5EC\uC90C